rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isNewDocument() {
      return resource == null;
    }
    
    // Analytics collection
    match /analytics/{docId} {
      // Extract userId from docId (format: user_stats_${userId})
      function getUserIdFromDoc() {
        return docId.split('user_stats_')[1];
      }
      
      allow read: if isSignedIn() && (
        isNewDocument() || isOwner(getUserIdFromDoc())
      );
      allow create: if isSignedIn() && isOwner(getUserIdFromDoc());
      allow update: if isSignedIn() && isOwner(getUserIdFromDoc());
      allow delete: if isSignedIn() && isOwner(getUserIdFromDoc());
    }
    
    // Test Results collection
    match /testResults/{resultId} {
      allow read: if isSignedIn() && (
        isNewDocument() || isOwner(resource.data.userId)
      );
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Chat functionality
    match /chats/{chatId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // Questions collection (read-only)
    match /questions/{questionId} {
      allow read: if isSignedIn();
      allow write: if false;  // Questions are managed by admins only
    }
    
    // User statistics
    match /user_stats/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Progress tracking
    match /progress/{progressId} {
      allow read: if isSignedIn() && (
        isNewDocument() || isOwner(resource.data.userId)
      );
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Question flags
    match /flags/{flagId} {
      allow read: if isSignedIn() && (
        isNewDocument() || isOwner(resource.data.userId)
      );
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // User notes
    match /notes/{noteId} {
      allow read: if isSignedIn() && (
        isNewDocument() || isOwner(resource.data.userId)
      );
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // User sessions
    match /sessions/{sessionId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }

    // Saved tests
    match /saved_tests/{testId} {
      allow read: if isSignedIn() && (
        isNewDocument() || isOwner(resource.data.userId)
      );
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }
  }
}